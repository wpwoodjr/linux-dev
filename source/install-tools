#!/bin/bash
# linux-dev install-tools

# exclude go betas and release candidates
exclude_go_betas() {
    grep -v -E 'go[0-9\.]+(beta|rc)'
}

# gets the latest github version of a package
get_github_latest_version() {
  local PAT='v[0-9]*.[0-9]*.[0-9]*'
  VERSION=$(curl -SsL "https://github.com/$1/releases/latest" \
    | grep href=\""/$1/releases/tag/$PAT"\" \
    | grep -o "tag/$PAT" \
    | cut -d "/" -f 2)
}

mkdir -p "$HOME/.linux-dev"
# registers a tool for upgrades
upgrade_tools="$HOME/.linux-dev/upgrade-tools"
register_upgrade() {
    [ "$EUID" -ne 0 ] && grep -s -q "^$1$" "$upgrade_tools" || echo "$1" >>"$upgrade_tools"
}

# registers a tool as installed
installed_tools="$HOME/.linux-dev/installed-tools"
register_installed() {
    echo -e "\n===========> installing $1..."
    [ "$EUID" -ne 0 ] && grep -s -q "^$1$" "$installed_tools" || echo "$1" >>"$installed_tools"
}

# add to path in .bashrc
add_path() {
    grep -q ":$1" "$HOME/.bashrc" || echo "export PATH=\$PATH:$1" >>~/.bashrc
}

go_version_not_installed() {
    ! (hash "/usr/local/go/bin/go" 2>/dev/null && grep -q "$1" <<<"$(/usr/local/go/bin/go version)") \
    || ! echo -e "\n===========> go $1 already installed"
}

sudo=""
[ "$EUID" -ne 0 ] && sudo="sudo -E"
export DEBIAN_FRONTEND="noninteractive"
OS="$(uname | tr '[:upper:]' '[:lower:]')"
ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')"
[ -z "$USER" ] && USER="$(whoami)"

for action
do
    case "$action" in

    "init")
        register_installed "init"
        # To make it easier for build and release pipelines to run apt-get,
        # configure apt to not require confirmation (assume the -y argument by default)
        #RUN echo "APT::Get::Assume-Yes \"true\";" > /etc/apt/apt.conf.d/90assumeyes
        # set up apt proxy (needed if using decrypting proxy; prevents OCSP validation errors)
        #RUN echo "Acquire { https::Verify-Peer false }" >>/etc/apt/apt.conf.d/99verify-peer.conf
        $sudo rm -f /etc/apt/apt.conf.d/docker-no-languages \
        && $sudo apt-get update \
        && $sudo apt-get install --no-install-recommends -qq \
            apt-utils \
            sudo \
        && $sudo apt-get upgrade -qq
        ;;

    "base")
        register_installed "base tools"
        $sudo apt-get install --no-install-recommends -qq \
            tzdata \
            locales \
            ca-certificates \
            lsb-release \
            curl \
            wget \
            jq \
            git \
            ssh \
            iputils-ping \
            netcat \
            apt-transport-https \
            gnupg \
            gnupg-agent \
            software-properties-common \
            htop \
            nano \
            vim \
            less \
            tree
        ;;

    "user")
        register_installed "user $USER with gid $GID in group $GROUP"
        # create user and add to sudo, docker groups
        #TODO fails if $GROUP already exists but $GID does not
        #TODO fails if $UID already exists
        $sudo groupadd -f -g "$GID" "$GROUP" \
        && $sudo useradd -m -u "$UID" -g "$GID" -s /bin/bash "$USER" \
        && $sudo usermod -aG sudo "$USER" \
        && echo '%sudo ALL=(ALL:ALL) NOPASSWD:ALL' | $sudo tee -a /etc/sudoers  >/dev/null
        ;;

    "locale")
        register_installed "locale C.UTF-8"
        $sudo update-locale LANG=C.UTF-8
        ;;

    "docker-ce-cli")
        register_installed "docker-ce-cli"
        # set up docker group
        [ -z "$(getent group docker)" ] && \
            if [ -z "$DOCKER_GID" ]; then $sudo groupadd docker; \
            else $sudo groupadd -g "$DOCKER_GID" docker; fi
        $sudo usermod -aG docker "$USER"

        # add docker-ce-cli to apt
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | $sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg \
        && echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" \
            | $sudo tee /etc/apt/sources.list.d/docker.list >/dev/null

        # update apt and install docker-ce-cli
        $sudo apt-get update \
        && $sudo apt-get install --no-install-recommends -qq \
            docker-ce-cli
        ;;

    "docker-ce")
        register_installed "docker-ce"
        # set up docker group
        [ -z "$(getent group docker)" ] && \
            if [ -z "$DOCKER_GID" ]; then $sudo groupadd docker; \
            else $sudo groupadd -g "$DOCKER_GID" docker; fi
        $sudo usermod -aG docker "$USER"

        # add docker-ce to apt
        echo -e "\n===========> adding docker-ce to apt..."
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | $sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg \
        && echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" \
            | $sudo tee /etc/apt/sources.list.d/docker.list >/dev/null

        # update apt and install docker-ce
        $sudo apt-get update \
        && $sudo apt-get install --no-install-recommends -qq \
            docker-ce
        ;;

    "kubectl")
        register_installed "kubectl"
        # add kubectl to apt
        $sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg \
        && echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" \
            | $sudo tee /etc/apt/sources.list.d/kubernetes.list >/dev/null

        # update apt and install kubectl
        $sudo apt-get update \
        && $sudo apt-get install --no-install-recommends -qq \
            kubectl
        ;;

    "azure-cli")
        register_installed "azure-cli"
        # add azure-cli to apt
        curl -sL https://packages.microsoft.com/keys/microsoft.asc | $sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/microsoft.gpg \
        && echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $(lsb_release -cs) main" \
            | $sudo tee /etc/apt/sources.list.d/azure-cli.list >/dev/null

        # update apt and install azure-cli
        $sudo apt-get update \
        && $sudo apt-get install --no-install-recommends -qq \
            azure-cli
        ;;

    "certs")
        register_installed "certs"
        $sudo update-ca-certificates
        ;;

    "kafkacat")
        register_installed "kafkacat"
        $sudo apt-get install --no-install-recommends -qq \
            kafkacat
        ;;

    "dev")
        register_installed "dev tools"
        $sudo apt-get install --no-install-recommends -qq \
            build-essential \
            make
        ;;

    "rust")
        register_installed "rust"
        $sudo apt-get install --no-install-recommends -qq \
            build-essential
        sh <(curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs) -y \
        && register_upgrade "rust-upgrade"
        ;;

    "rust-upgrade")
        echo -e "\n===========> upgrading rust..."
        rustup upgrade
        ;;

    "go")
        register_installed "go $VERSION"
        VERSION="$(curl --silent https://go.dev/dl/?mode=json \
            | jq -r '.[].files[].version' | sort | uniq \
            | exclude_go_betas | sed -e 's/go//' | sort -V | tail -1)"
        go_version_not_installed "$VERSION" \
        && rm -rf "/tmp/install" && mkdir -p "/tmp/install" \
        && curl -o "/tmp/install/go.tar.gz" "https://storage.googleapis.com/golang/go$VERSION.$OS-$ARCH.tar.gz" \
        && $sudo rm -rf "/usr/local/go" \
        && $sudo tar -C "/usr/local" -xzf "/tmp/install/go.tar.gz" \
        && add_path "/usr/local/go/bin" \
        && /usr/local/go/bin/go version \
        && register_upgrade "go"
        rm -rf "/tmp/install"
        ;;

    "diffuse")
        register_installed "diffuse"
        $sudo apt-get install --no-install-recommends -qq \
            gir1.2-gtk-3.0 gnome-icon-theme diffuse \
            gitk git-gui
        ;;

    "man")
        register_installed "man pages"
        $sudo unminimize \
        && $sudo apt-get install --no-install-recommends -qq \
            man-db
        ;;

    "krew")
        register_installed "krew"
        rm -rf "/tmp/install" && mkdir -p "/tmp/install" \
        && KREW="krew-${OS}_${ARCH}" \
        && curl -fsSL "https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz" \
            | tar -zxC "/tmp/install" \
        && "/tmp/install/${KREW}" install krew \
        && register_upgrade "krew-upgrade"
        rm -rf "/tmp/install"
        ;;

    "krew-upgrade")
        echo -e "\n===========> upgrading krew..."
        kubectl krew upgrade
        ;;

    "helm3")
        register_installed "helm3"
        curl -sSL https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash \
        && helm version \
        && register_upgrade "helm3"
        ;;

    "kpt")
        register_installed "kpt"
        rm -rf "/tmp/install" && mkdir -p "/tmp/install" \
        && curl -L "https://storage.googleapis.com/kpt-dev/latest/linux_amd64/kpt" -o "/tmp/install/kpt" \
        && $sudo install "/tmp/install/kpt" "/usr/local/bin" \
        && echo "kpt version $(kpt version)" \
        && register_upgrade "kpt"
        rm -rf "/tmp/install"
        ;;

    "kustomize")
        register_installed "kustomize"
        rm -rf "/tmp/install" && mkdir -p "/tmp/install" && cd "/tmp/install" \
        && curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash \
        && $sudo install "/tmp/install/kustomize" "/usr/local/bin" \
        && register_upgrade "kustomize"
        cd - >/dev/null
        rm -rf "/tmp/install"
        ;;

    "k9s")
        register_installed "k9s"
        get_github_latest_version "derailed/k9s" \
        && rm -rf "/tmp/install" && mkdir -p "/tmp/install" \
        && curl -L "https://github.com/derailed/k9s/releases/download/${VERSION}/k9s_Linux_x86_64.tar.gz" -o "/tmp/install/k9s.tar.gz" \
        && tar xzf "/tmp/install/k9s.tar.gz" -C "/tmp/install" \
        && $sudo install "/tmp/install/k9s" "/usr/local/bin" \
        && k9s version \
        && register_upgrade "k9s"
        rm -rf "/tmp/install"
        ;;

    "devspace")
        # register_installed "devspace"
        # get_github_latest_version "devspace-cloud/devspace" \
        # && rm -rf "/tmp/install" && mkdir -p "/tmp/install" \
        # && curl -L "https://github.com/devspace-cloud/devspace/releases/download/$VERSION/devspace-linux-amd64" -o "/tmp/install/devspace" \
        # && $sudo install "/tmp/install/devspace" "/usr/local/bin" \
        # && devspace --version \
        # && register_upgrade "devspace"
        # rm -rf "/tmp/install"
        ;;

    "upgrade")
        echo -e "\n===========> upgrading apt packages..."
        $sudo apt-get update \
        && $sudo apt-get upgrade -qq

        [ -f "$upgrade_tools" ] && install-tools $(cat "$upgrade_tools")
        ;;

    *)
        echo -e "\n===========> \"$action\" not found"
        ;;
    esac
done
