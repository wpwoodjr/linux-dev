#!/bin/bash
# linux-dev install-tools

show_help() {
    cat 1>&2 <<EOF
Usage: install-tools [OPTIONS] [ACTIONS]

OPTIONS:
  -h, --help        Show this help message

ACTIONS (one or more actions separated by a space):
  init           Initialize the environment and set up necessary dependencies
  base           Install basic tools such as curl and unzip
  user           Configure user settings and environment for docker container
  locale         Set the locale LANG to C.UTF-8
  docker-ce-cli  Install the Docker command-line interface (CLI)
  docker-ce      Install the Docker Community Edition (CE) engine and CLI
  kubectl        Install kubectl, the Kubernetes command-line tool
  azure-cli      Install the Azure command-line interface
  certs          Install certificates for secure connections
  kafkacat       Install kafkacat, a command-line tool for interacting with Apache Kafka
  dev            Install development tools such as build-essential and cmake
  rust           Install the Rust programming language and Cargo package manager
  rust-upgrade   Upgrade the Rust programming language and Cargo package manager
  go             Install the Go programming language
  diffuse        Install the Diffuse diff/merge gui tool
  git-tools      Install Git tools such as tig
  git-gui-tools  Install Git gui tools gitk and git-gui
  man            Install man-pages and other man page enhancements
  krew           Install Krew, a package manager for kubectl plugins
  krew-upgrade   Upgrade Krew and all installed kubectl plugins
  helm3          Install Helm 3, a package manager for Kubernetes
  kpt            Install kpt, a tool for managing Kubernetes resource configuration
  kustomize      Install kustomize, a tool for customizing Kubernetes resource configurations
  k9s            Install k9s, a command-line tool for interacting with Kubernetes
  devspace       Install DevSpace, an interactive developer tool for Kubernetes
  acorn          Install Acorn, an application packaging and deployment framework for Kubernetes
  upgrade        Upgrade all the tools that were previously installed and registered for upgrades
EOF
}

actions=( \
    "-h" "--help" \
    "init" \
    "base" \
    "user" \
    "locale" \
    "docker-ce-cli" \
    "docker-ce" \
    "kubectl" \
    "azure-cli" \
    "certs" \
    "kafkacat" \
    "dev" \
    "rust" \
    "rust-upgrade" \
    "go" \
    "diffuse" \
    "git-tools" \
    "git-gui-tools" \
    "man" \
    "krew" \
    "krew-upgrade" \
    "helm3" \
    "kpt" \
    "kustomize" \
    "k9s" \
    "devspace" \
    "acorn" \
    "upgrade")

# install apt package
apt_install() {
  $sudo apt-get update \
  && $sudo apt-get install --no-install-recommends -qq \
    $@
}

# exclude go betas and release candidates
exclude_go_betas() {
    grep -v -E 'go[0-9\.]+(beta|rc)'
}

# gets the latest github version of a package
# get_github_latest_version() {
#   local PAT='v[0-9]*.[0-9]*.[0-9]*'
#   echo "$(curl -SsL "https://github.com/$1/releases/latest" \
#     | grep href=\""/$1/releases/tag/$PAT"\" \
#     | grep -o "tag/$PAT" \
#     | cut -d "/" -f 2)"
# }

# gets the latest github version of a package
get_github_latest_version() {
    echo "$(curl -s https://api.github.com/repos/$1/releases | grep -m 1 \"tag_name\": | cut -d \" -f 4)"
}

get_github_download_url() {
    local url="$(curl -s https://api.github.com/repos/$1/releases | grep -i -m 1 "browser_download_url.*$OS.*$ARCH.*tar.gz\"" | cut -d \" -f 4)"
    if [ -z "$url" ]; then
        [ "$ARCH" = "amd64" ] && \
            url="$(curl -s https://api.github.com/repos/$1/releases | grep -i -m 1 "browser_download_url.*$OS.*x86_64.*tar.gz\"" | cut -d \" -f 4)"
        [ -z "$url" ] && return 1
    fi
    echo "$url"
}

mkdir -p "$HOME/.linux-dev"
# registers a tool for upgrades
upgrade_tools="$HOME/.linux-dev/upgrade-tools"
register_upgrade() {
    [ "$EUID" -ne 0 ] && grep -s -q "^$1$" "$upgrade_tools" || echo "$1" >>"$upgrade_tools"
}

# registers a tool as installed
installed_tools="$HOME/.linux-dev/installed-tools"
register_installed() {
    echo -e "\n===========> installing $1..."
    [ "$EUID" -ne 0 ] && grep -s -q "^$1$" "$installed_tools" || echo "$1" >>"$installed_tools"
}

# add to path in .bashrc
add_path() {
    grep -q ":$1" "$HOME/.bashrc" || echo "export PATH=\$PATH:$1" >>~/.bashrc
}

go_version_not_installed() {
    [ ! -f "/usr/local/go/bin/go" ] \
    || ! (hash "/usr/local/go/bin/go" 2>/dev/null && grep -q "$1" <<<"$(/usr/local/go/bin/go version)") \
    || ! echo -e "\n===========> go $1 already installed"
}

get_script_path() {
    # echo "$(readlink -f -- "${BASH_SOURCE[0]}")"
    echo "${BASH_SOURCE[0]}"
}
install_tools="$(get_script_path)"

sudo=""
[ "$EUID" -ne 0 ] && sudo="sudo -E"
export DEBIAN_FRONTEND="noninteractive"
OS="$(uname | tr '[:upper:]' '[:lower:]')"
ARCH="$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\(arm\)\(64\)\?.*/\1\2/' -e 's/aarch64$/arm64/')"
[ -z "$USER" ] && USER="$(whoami)"

[ $# -eq 0 ] && show_help && exit 0

for action
do
    # this will give an error if an action is not listed in help
    [[ " ${actions[*]} " != *" $action "* ]] && echo -e "\n===========> \"$action\" not found" && show_help && continue

    case "$action" in

    -h|--help)
        show_help && exit 0
        ;;

    "init")
        register_installed "init"
        # To make it easier for build and release pipelines to run apt-get,
        # configure apt to not require confirmation (assume the -y argument by default)
        #RUN echo "APT::Get::Assume-Yes \"true\";" > /etc/apt/apt.conf.d/90assumeyes
        # set up apt proxy (needed if using decrypting proxy; prevents OCSP validation errors)
        #RUN echo "Acquire { https::Verify-Peer false }" >>/etc/apt/apt.conf.d/99verify-peer.conf
        $sudo rm -f /etc/apt/apt.conf.d/docker-no-languages \
        && apt_install \
            apt-utils \
            sudo \
        && $sudo apt-get upgrade -qq
        ;;

    "base")
        register_installed "base tools"
        apt_install \
            tzdata \
            locales \
            ca-certificates \
            lsb-release \
            curl \
            wget \
            jq \
            git \
            ssh \
            iputils-ping \
            netcat \
            apt-transport-https \
            gnupg \
            gnupg-agent \
            software-properties-common \
            htop \
            nano \
            vim \
            less \
            tree
        ;;

    "user")
        register_installed "user $USER with gid $GID in group $GROUP"
        # create user and add to sudo, docker groups
        #TODO fails if $GROUP already exists but $GID does not
        #TODO fails if $UID already exists
        $sudo groupadd -f -g "$GID" "$GROUP" \
        && $sudo useradd -m -u "$UID" -g "$GID" -s /bin/bash "$USER" \
        && $sudo usermod -aG sudo "$USER" \
        && echo '%sudo ALL=(ALL:ALL) NOPASSWD:ALL' | $sudo tee -a /etc/sudoers  >/dev/null
        ;;

    "locale")
        register_installed "locale C.UTF-8"
        $sudo update-locale LANG=C.UTF-8
        ;;

    "docker-ce-cli")
        register_installed "docker-ce-cli"
        # set up docker group
        [ -z "$(getent group docker)" ] && \
            if [ -z "$DOCKER_GID" ]; then $sudo groupadd docker; \
            else $sudo groupadd -g "$DOCKER_GID" docker; fi
        $sudo usermod -aG docker "$USER"

        # add docker-ce-cli to apt
        $sudo mkdir -p /etc/apt/keyrings \
        && curl -fsSL https://download.docker.com/linux/ubuntu/gpg | $sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg \
        && echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" \
          | $sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

        # update apt and install docker-ce-cli
        apt_install \
            docker-ce-cli
        ;;

    "docker-ce")
        register_installed "docker-ce"
        # set up docker group
        [ -z "$(getent group docker)" ] && \
            if [ -z "$DOCKER_GID" ]; then $sudo groupadd docker; \
            else $sudo groupadd -g "$DOCKER_GID" docker; fi
        $sudo usermod -aG docker "$USER"

        # add docker-ce to apt
        $sudo mkdir -p /etc/apt/keyrings \
        && curl -fsSL https://download.docker.com/linux/ubuntu/gpg | $sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg \
        && echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" \
          | $sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

        # update apt and install docker-ce
        apt_install \
            docker-ce
        ;;

    "kubectl")
        register_installed "kubectl"
        # add kubectl to apt
        $sudo curl -fsSLo /etc/apt/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg \
        && echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" \
            | $sudo tee /etc/apt/sources.list.d/kubernetes.list >/dev/null

        # update apt and install kubectl
        apt_install \
            kubectl
        ;;

    "azure-cli")
        register_installed "azure-cli"
        # add azure-cli to apt
        $sudo mkdir -p /etc/apt/keyrings
        curl -sLS https://packages.microsoft.com/keys/microsoft.asc |
            gpg --dearmor |
            $sudo tee /etc/apt/keyrings/microsoft.gpg > /dev/null
        $sudo chmod go+r /etc/apt/keyrings/microsoft.gpg
        AZ_REPO=$(lsb_release -cs)
        echo "deb [arch=`dpkg --print-architecture` signed-by=/etc/apt/keyrings/microsoft.gpg] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" |
            $sudo tee /etc/apt/sources.list.d/azure-cli.list >/dev/null

        # update apt and install azure-cli
        apt_install \
            azure-cli
        ;;

    "certs")
        register_installed "certs"
        $sudo update-ca-certificates
        ;;

    "kafkacat")
        register_installed "kafkacat"
        apt_install \
            kafkacat
        ;;

    "dev")
        register_installed "dev tools"
        apt_install \
            build-essential \
            pkg-config \
            libssl-dev \
            make
        ;;

    "rust")
        $install_tools dev
        register_installed "rust"
        sh <(curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs) -y \
        && register_upgrade "rust-upgrade"
        ;;

    "rust-upgrade")
        echo -e "\n===========> upgrading rust..."
        rustup upgrade
        ;;

    "go")
        register_installed "go"
        VERSION="$(curl --silent https://go.dev/dl/?mode=json \
            | jq -r '.[].files[].version' | sort | uniq \
            | exclude_go_betas | sed -e 's/go//' | sort -V | tail -1)"
        go_version_not_installed "$VERSION" \
        && rm -rf "/tmp/install" && mkdir -p "/tmp/install" \
        && echo "https://go.dev/dl/go$VERSION.$OS-$ARCH.tar.gz" \
        && curl -L -o "/tmp/install/go.tar.gz" "https://go.dev/dl/go$VERSION.$OS-$ARCH.tar.gz" \
        && $sudo rm -rf "/usr/local/go" \
        && $sudo tar -C "/usr/local" -xzf "/tmp/install/go.tar.gz" \
        && add_path "/usr/local/go/bin" \
        && /usr/local/go/bin/go version \
        && register_upgrade "go"
        rm -rf "/tmp/install"
        ;;

    "diffuse")
        register_installed "diffuse"
        apt_install \
            gir1.2-gtk-3.0 gnome-icon-theme diffuse
        ;;

    "git-tools")
        register_installed "git-tools"
        apt_install \
            tig
        ;;

    "git-gui-tools")
        register_installed "git-gui-tools"
        apt_install \
            gitk git-gui
        ;;

    "man")
        register_installed "man pages"
        $sudo unminimize
        apt_install \
            man-db
        ;;

    "krew")
        register_installed "krew"
        rm -rf "/tmp/install" && mkdir -p "/tmp/install" \
        && curl -sSL "$(get_github_download_url "kubernetes-sigs/krew")" | tar -zxC "/tmp/install" \
        && "$(ls /tmp/install/krew*)" install krew \
        && register_upgrade "krew-upgrade"
        rm -rf "/tmp/install"
        ;;

    "krew-upgrade")
        echo -e "\n===========> upgrading krew..."
        kubectl krew upgrade
        ;;

    "helm3")
        register_installed "helm3"
        curl -sSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash \
        && helm version \
        && register_upgrade "helm3"
        ;;

    "kpt")
        register_installed "kpt"
        rm -rf "/tmp/install" && mkdir -p "/tmp/install" \
        && curl -sSL "$(get_github_download_url "GoogleContainerTools/kpt")" | tar -zxC "/tmp/install" \
        && $sudo install "/tmp/install/kpt" "/usr/local/bin" \
        && echo "kpt version $(kpt version)" \
        && register_upgrade "kpt"
        rm -rf "/tmp/install"
        ;;

    "kustomize")
        register_installed "kustomize"
        rm -rf "/tmp/install" && mkdir -p "/tmp/install" && cd "/tmp/install" \
        && curl -sSl "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash \
        && $sudo install "/tmp/install/kustomize" "/usr/local/bin" \
        && register_upgrade "kustomize"
        cd - >/dev/null
        rm -rf "/tmp/install"
        ;;

    "k9s")
        register_installed "k9s"
        rm -rf "/tmp/install" && mkdir -p "/tmp/install" \
        && curl -sSL "$(get_github_download_url "derailed/k9s")" | tar -zxC "/tmp/install" \
        && $sudo install "/tmp/install/k9s" "/usr/local/bin" \
        && k9s version \
        && register_upgrade "k9s"
        rm -rf "/tmp/install"
        ;;

    "devspace")
        register_installed "devspace"
        rm -rf "/tmp/install" && mkdir -p "/tmp/install" \
        && curl -sSL -o /tmp/install/devspace "https://github.com/loft-sh/devspace/releases/latest/download/devspace-$OS-$ARCH" \
        && $sudo install "/tmp/install/devspace" "/usr/local/bin" \
        && devspace --version \
        && register_upgrade "devspace"
        rm -rf "/tmp/install"
        ;;

    "acorn")
        register_installed "acorn"
        rm -rf "/tmp/install" && mkdir -p "/tmp/install" \
        && curl -sSL "$(get_github_download_url "acorn-io/acorn")" | tar -zxC "/tmp/install" \
        && $sudo install "/tmp/install/acorn" "/usr/local/bin" \
        && echo "$(acorn --version)" \
        && register_upgrade "acorn"
        rm -rf "/tmp/install"
        ;;

    "upgrade")
        echo -e "\n===========> upgrading apt packages..."
        $sudo apt-get update \
        && $sudo apt-get upgrade -qq

        [ -f "$upgrade_tools" ] && install-tools $(cat "$upgrade_tools")
        ;;

    *)
        echo -e "\n===========> \"$action\" is listed in help but doesn't exist"
        ;;
    esac
done
